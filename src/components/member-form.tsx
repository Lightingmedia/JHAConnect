'use client';

import { useState, useEffect } from 'react';
import type { User } from '@/lib/types';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Textarea } from './ui/textarea';
import { Checkbox } from './ui/checkbox';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from './ui/dialog';

interface MemberFormProps {
  user: User | null;
  currentUser: User | null;
  onSave: (user: User) => void;
  onCancel: () => void;
}

const emptyUser: Omit<User, 'id' | 'profilePicture'> = {
    name: '',
    phone: '',
    birthday: { month: 1, day: 1 },
    profileDetails: '',
    isAdmin: false
};

const SUPER_ADMIN_PHONE = "9254343862";

export function MemberForm({ user, currentUser, onSave, onCancel }: MemberFormProps) {
  const [formData, setFormData] = useState<Omit<User, 'id' | 'profilePicture'>>(user ? {
      name: user.name,
      phone: user.phone,
      birthday: user.birthday,
      profileDetails: user.profileDetails,
      isAdmin: user.isAdmin || false
  } : emptyUser);

  useEffect(() => {
    if (user) {
        setFormData({
            name: user.name,
            phone: user.phone,
            birthday: user.birthday,
            profileDetails: user.profileDetails,
            isAdmin: user.isAdmin || false
        });
    } else {
        setFormData(emptyUser);
    }
  }, [user]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleBirthdayChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    const intValue = parseInt(value, 10);
    // Basic validation to prevent NaN
    if (!isNaN(intValue)) {
        setFormData(prev => ({
        ...prev,
        birthday: { ...prev.birthday, [name]: intValue },
        }));
    }
  };
  
  const handleCheckboxChange = (checked: boolean) => {
    setFormData(prev => ({ ...prev, isAdmin: checked }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // For new users, ID and picture are generated by the server action.
    // For existing users, we need to pass their existing ID and picture.
    const userToSave: User = {
        ...formData,
        id: user?.id || `new-${Date.now()}`,
        profilePicture: user?.profilePicture || '',
    };
    onSave(userToSave);
  };

  const isCurrentUserSuperAdmin = currentUser?.phone === SUPER_ADMIN_PHONE;
  const isEditingSuperAdmin = user?.phone === SUPER_ADMIN_PHONE;

  return (
    <Dialog open onOpenChange={onCancel}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle className="font-headline">{user ? 'Edit Member' : 'Add New Member'}</DialogTitle>
          <DialogDescription>
            {user ? 'Update the details for this community member.' : 'Enter the details for the new community member.'}
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="name" className="text-right">Name</Label>
            <Input id="name" name="name" value={formData.name} onChange={handleChange} className="col-span-3" required/>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="phone" className="text-right">Phone</Label>
            <Input id="phone" name="phone" value={formData.phone} onChange={handleChange} className="col-span-3" required/>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label className="text-right">Birthday</Label>
            <div className="col-span-3 grid grid-cols-2 gap-2">
                <Input id="birthday-month" name="month" type="number" min="1" max="12" placeholder="Month" value={formData.birthday.month} onChange={handleBirthdayChange} required/>
                <Input id="birthday-day" name="day" type="number" min="1" max="31" placeholder="Day" value={formData.birthday.day} onChange={handleBirthdayChange} required/>
            </div>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="profileDetails" className="text-right">Details</Label>
            <Textarea id="profileDetails" name="profileDetails" value={formData.profileDetails} onChange={handleChange} className="col-span-3" />
          </div>
          {isCurrentUserSuperAdmin && (
             <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="isAdmin" className="text-right">Admin</Label>
                <div className="col-span-3 flex items-center h-5">
                    <Checkbox 
                        id="isAdmin" 
                        checked={formData.isAdmin} 
                        onCheckedChange={handleCheckboxChange}
                        disabled={isEditingSuperAdmin}
                    />
                     <span className="ml-2 text-sm text-muted-foreground">
                        {isEditingSuperAdmin ? "Super Admin cannot be changed." : "Grant admin privileges"}
                     </span>
                </div>
            </div>
          )}
          <DialogFooter>
            <Button type="button" variant="ghost" onClick={onCancel}>Cancel</Button>
            <Button type="submit">Save changes</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
